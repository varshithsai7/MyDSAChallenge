standard template library

containers
iterators
algorithms
functors

vectors
vector<int>vec={1,2};
vector<int>vec(3,10);
vector<int>vec2(vec1);
funtions

O(1)
v.size(),v.capacity()
v.push_back() v.pop_back()
v.at() v[]
v.emplace_back()
v.front() v.back()

O(n)
v.erase(v.begin()) at ind 0    ,v.erase(start,end)
v.insert()
v.clear()
this do not change capacity just changes size
v.empty()


vector iterator
vector<int>::iterator it;
for(it=v.begin();it!=vec.end();it++){
    cout<<*(it)<<endl;
}

backward
vector<int>reverse_iterator it;
for(auto it=vec.rbegin();it!=v.rend();it++){
    cout<<*(it)<<endl;
}


List 
it is a doubly linkedlists
list<int>l={1,2,3};
functions like 

l.push_back() l.push_front()
l.emblace_back() l.emblace_front()
l.pop_back() l.pop_front()


deque
double ended queue
push_back push_front
emblace_back emblace_front
pop_back pop_front

deque<int>d={1,2,3};
random access possible in deque not in list
we cant access l[2]

vector ist and deque are sequence containers


Pair 
pair<int,int>p={3,5};
pair<char,int>p={'a',1};
cout<<p.first<<endl;
cout<<p.second<<endl;


pair<int,pair<int,int>>p={2,{3,4}};
cout<<p.first<<endl;
cout<<p.second.first<<endl;
cout<<p.second.second<<endl;


vector<pair<int,int>> v={{1,2},{3,4}};
v.push_back({4,5});
v.emplace_back(4,5);
automatically creates without using flower brackets

for(auto p:v){
    cout<<p.first<<" "<<p.second<<endl;
}


stack<int>s;
push,emplace,top
pop
size
empty
swap

queue<int>q
push,emplace
front
pop
size
swap
empty

priority_queue
push
top pop size empty

map<string,int>m;
m[ke]=value;
insert
emplace
count 
erase 
find 
size empty
for(auto p:map){
    cout<<p.first<<p.second;
}


algos 
sort(arr,arr+n,greater<int>)
sort(arr.begin(),arr.end())


